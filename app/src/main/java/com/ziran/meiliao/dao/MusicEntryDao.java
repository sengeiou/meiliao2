package com.ziran.meiliao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ziran.meiliao.entry.MusicEntry;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MUSIC_ENTRY".
*/
public class MusicEntryDao extends AbstractDao<MusicEntry, Long> {

    public static final String TABLENAME = "MUSIC_ENTRY";

    /**
     * Properties of entity MusicEntry.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AlbumId = new Property(0, String.class, "albumId", false, "ALBUM_ID");
        public final static Property Path = new Property(1, String.class, "path", false, "PATH");
        public final static Property Duration = new Property(2, String.class, "duration", false, "DURATION");
        public final static Property IsCollectMusic = new Property(3, boolean.class, "isCollectMusic", false, "IS_COLLECT_MUSIC");
        public final static Property Id = new Property(4, Long.class, "id", true, "_id");
        public final static Property MusicId = new Property(5, int.class, "musicId", false, "MUSIC_ID");
        public final static Property Name = new Property(6, String.class, "name", false, "NAME");
        public final static Property Type = new Property(7, int.class, "type", false, "TYPE");
        public final static Property Url = new Property(8, String.class, "url", false, "URL");
        public final static Property FileSize = new Property(9, float.class, "fileSize", false, "FILE_SIZE");
        public final static Property Size = new Property(10, String.class, "size", false, "SIZE");
        public final static Property ShareUrl = new Property(11, String.class, "shareUrl", false, "SHARE_URL");
        public final static Property ShareTitle = new Property(12, String.class, "shareTitle", false, "SHARE_TITLE");
        public final static Property ShareDescript = new Property(13, String.class, "shareDescript", false, "SHARE_DESCRIPT");
        public final static Property SharePic = new Property(14, String.class, "sharePic", false, "SHARE_PIC");
        public final static Property CatalogName = new Property(15, String.class, "catalogName", false, "CATALOG_NAME");
        public final static Property IsHead = new Property(16, boolean.class, "isHead", false, "IS_HEAD");
        public final static Property Audition = new Property(17, boolean.class, "audition", false, "AUDITION");
    }


    public MusicEntryDao(DaoConfig config) {
        super(config);
    }
    
    public MusicEntryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MUSIC_ENTRY\" (" + //
                "\"ALBUM_ID\" TEXT," + // 0: albumId
                "\"PATH\" TEXT," + // 1: path
                "\"DURATION\" TEXT," + // 2: duration
                "\"IS_COLLECT_MUSIC\" INTEGER NOT NULL ," + // 3: isCollectMusic
                "\"_id\" INTEGER PRIMARY KEY ," + // 4: id
                "\"MUSIC_ID\" INTEGER NOT NULL ," + // 5: musicId
                "\"NAME\" TEXT," + // 6: name
                "\"TYPE\" INTEGER NOT NULL ," + // 7: type
                "\"URL\" TEXT," + // 8: url
                "\"FILE_SIZE\" REAL NOT NULL ," + // 9: fileSize
                "\"SIZE\" TEXT," + // 10: size
                "\"SHARE_URL\" TEXT," + // 11: shareUrl
                "\"SHARE_TITLE\" TEXT," + // 12: shareTitle
                "\"SHARE_DESCRIPT\" TEXT," + // 13: shareDescript
                "\"SHARE_PIC\" TEXT," + // 14: sharePic
                "\"CATALOG_NAME\" TEXT," + // 15: catalogName
                "\"IS_HEAD\" INTEGER NOT NULL ," + // 16: isHead
                "\"AUDITION\" INTEGER NOT NULL );"); // 17: audition
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MUSIC_ENTRY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MusicEntry entity) {
        stmt.clearBindings();
 
        String albumId = entity.getAlbumId();
        if (albumId != null) {
            stmt.bindString(1, albumId);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(2, path);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(3, duration);
        }
        stmt.bindLong(4, entity.getIsCollectMusic() ? 1L: 0L);
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(5, id);
        }
        stmt.bindLong(6, entity.getMusicId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
        stmt.bindLong(8, entity.getType());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(9, url);
        }
        stmt.bindDouble(10, entity.getFileSize());
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(11, size);
        }
 
        String shareUrl = entity.getShareUrl();
        if (shareUrl != null) {
            stmt.bindString(12, shareUrl);
        }
 
        String shareTitle = entity.getShareTitle();
        if (shareTitle != null) {
            stmt.bindString(13, shareTitle);
        }
 
        String shareDescript = entity.getShareDescript();
        if (shareDescript != null) {
            stmt.bindString(14, shareDescript);
        }
 
        String sharePic = entity.getSharePic();
        if (sharePic != null) {
            stmt.bindString(15, sharePic);
        }
 
        String catalogName = entity.getCatalogName();
        if (catalogName != null) {
            stmt.bindString(16, catalogName);
        }
        stmt.bindLong(17, entity.getIsHead() ? 1L: 0L);
        stmt.bindLong(18, entity.getAudition() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MusicEntry entity) {
        stmt.clearBindings();
 
        String albumId = entity.getAlbumId();
        if (albumId != null) {
            stmt.bindString(1, albumId);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(2, path);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(3, duration);
        }
        stmt.bindLong(4, entity.getIsCollectMusic() ? 1L: 0L);
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(5, id);
        }
        stmt.bindLong(6, entity.getMusicId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
        stmt.bindLong(8, entity.getType());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(9, url);
        }
        stmt.bindDouble(10, entity.getFileSize());
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(11, size);
        }
 
        String shareUrl = entity.getShareUrl();
        if (shareUrl != null) {
            stmt.bindString(12, shareUrl);
        }
 
        String shareTitle = entity.getShareTitle();
        if (shareTitle != null) {
            stmt.bindString(13, shareTitle);
        }
 
        String shareDescript = entity.getShareDescript();
        if (shareDescript != null) {
            stmt.bindString(14, shareDescript);
        }
 
        String sharePic = entity.getSharePic();
        if (sharePic != null) {
            stmt.bindString(15, sharePic);
        }
 
        String catalogName = entity.getCatalogName();
        if (catalogName != null) {
            stmt.bindString(16, catalogName);
        }
        stmt.bindLong(17, entity.getIsHead() ? 1L: 0L);
        stmt.bindLong(18, entity.getAudition() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4);
    }    

    @Override
    public MusicEntry readEntity(Cursor cursor, int offset) {
        MusicEntry entity = new MusicEntry( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // albumId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // path
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // duration
            cursor.getShort(offset + 3) != 0, // isCollectMusic
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // id
            cursor.getInt(offset + 5), // musicId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            cursor.getInt(offset + 7), // type
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // url
            cursor.getFloat(offset + 9), // fileSize
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // size
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // shareUrl
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // shareTitle
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // shareDescript
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // sharePic
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // catalogName
            cursor.getShort(offset + 16) != 0, // isHead
            cursor.getShort(offset + 17) != 0 // audition
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MusicEntry entity, int offset) {
        entity.setAlbumId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDuration(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsCollectMusic(cursor.getShort(offset + 3) != 0);
        entity.setId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setMusicId(cursor.getInt(offset + 5));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setType(cursor.getInt(offset + 7));
        entity.setUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFileSize(cursor.getFloat(offset + 9));
        entity.setSize(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setShareUrl(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setShareTitle(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setShareDescript(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSharePic(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCatalogName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setIsHead(cursor.getShort(offset + 16) != 0);
        entity.setAudition(cursor.getShort(offset + 17) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MusicEntry entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MusicEntry entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MusicEntry entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
