package com.ziran.meiliao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ziran.meiliao.entry.ExerciseProgressEntry;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXERCISE_PROGRESS_ENTRY".
*/
public class ExerciseProgressEntryDao extends AbstractDao<ExerciseProgressEntry, Long> {

    public static final String TABLENAME = "EXERCISE_PROGRESS_ENTRY";

    /**
     * Properties of entity ExerciseProgressEntry.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Max = new Property(1, int.class, "max", false, "MAX");
        public final static Property CurrentProgress = new Property(2, int.class, "currentProgress", false, "CURRENT_PROGRESS");
        public final static Property CreateData = new Property(3, java.util.Date.class, "createData", false, "CREATE_DATA");
    }


    public ExerciseProgressEntryDao(DaoConfig config) {
        super(config);
    }
    
    public ExerciseProgressEntryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXERCISE_PROGRESS_ENTRY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MAX\" INTEGER NOT NULL ," + // 1: max
                "\"CURRENT_PROGRESS\" INTEGER NOT NULL ," + // 2: currentProgress
                "\"CREATE_DATA\" INTEGER);"); // 3: createData
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXERCISE_PROGRESS_ENTRY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ExerciseProgressEntry entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMax());
        stmt.bindLong(3, entity.getCurrentProgress());
 
        java.util.Date createData = entity.getCreateData();
        if (createData != null) {
            stmt.bindLong(4, createData.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ExerciseProgressEntry entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMax());
        stmt.bindLong(3, entity.getCurrentProgress());
 
        java.util.Date createData = entity.getCreateData();
        if (createData != null) {
            stmt.bindLong(4, createData.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ExerciseProgressEntry readEntity(Cursor cursor, int offset) {
        ExerciseProgressEntry entity = new ExerciseProgressEntry( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // max
            cursor.getInt(offset + 2), // currentProgress
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)) // createData
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ExerciseProgressEntry entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMax(cursor.getInt(offset + 1));
        entity.setCurrentProgress(cursor.getInt(offset + 2));
        entity.setCreateData(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ExerciseProgressEntry entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ExerciseProgressEntry entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ExerciseProgressEntry entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
