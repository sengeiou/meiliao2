package com.ziran.meiliao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ziran.meiliao.entry.DownloadData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWNLOAD_DATA".
*/
public class DownloadDataDao extends AbstractDao<DownloadData, Long> {

    public static final String TABLENAME = "DOWNLOAD_DATA";

    /**
     * Properties of entity DownloadData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property Path = new Property(2, String.class, "path", false, "PATH");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property CurrentLength = new Property(4, int.class, "currentLength", false, "CURRENT_LENGTH");
        public final static Property TotalLength = new Property(5, int.class, "totalLength", false, "TOTAL_LENGTH");
        public final static Property Percentage = new Property(6, float.class, "percentage", false, "PERCENTAGE");
        public final static Property State = new Property(7, int.class, "state", false, "STATE");
        public final static Property ChildTaskCount = new Property(8, int.class, "childTaskCount", false, "CHILD_TASK_COUNT");
        public final static Property Date = new Property(9, long.class, "date", false, "DATE");
        public final static Property LastModify = new Property(10, String.class, "lastModify", false, "LAST_MODIFY");
    }


    public DownloadDataDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWNLOAD_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"URL\" TEXT," + // 1: url
                "\"PATH\" TEXT," + // 2: path
                "\"NAME\" TEXT," + // 3: name
                "\"CURRENT_LENGTH\" INTEGER NOT NULL ," + // 4: currentLength
                "\"TOTAL_LENGTH\" INTEGER NOT NULL ," + // 5: totalLength
                "\"PERCENTAGE\" REAL NOT NULL ," + // 6: percentage
                "\"STATE\" INTEGER NOT NULL ," + // 7: state
                "\"CHILD_TASK_COUNT\" INTEGER NOT NULL ," + // 8: childTaskCount
                "\"DATE\" INTEGER NOT NULL ," + // 9: date
                "\"LAST_MODIFY\" TEXT);"); // 10: lastModify
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWNLOAD_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownloadData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindLong(5, entity.getCurrentLength());
        stmt.bindLong(6, entity.getTotalLength());
        stmt.bindDouble(7, entity.getPercentage());
        stmt.bindLong(8, entity.getState());
        stmt.bindLong(9, entity.getChildTaskCount());
        stmt.bindLong(10, entity.getDate());
 
        String lastModify = entity.getLastModify();
        if (lastModify != null) {
            stmt.bindString(11, lastModify);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownloadData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindLong(5, entity.getCurrentLength());
        stmt.bindLong(6, entity.getTotalLength());
        stmt.bindDouble(7, entity.getPercentage());
        stmt.bindLong(8, entity.getState());
        stmt.bindLong(9, entity.getChildTaskCount());
        stmt.bindLong(10, entity.getDate());
 
        String lastModify = entity.getLastModify();
        if (lastModify != null) {
            stmt.bindString(11, lastModify);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DownloadData readEntity(Cursor cursor, int offset) {
        DownloadData entity = new DownloadData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // path
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.getInt(offset + 4), // currentLength
            cursor.getInt(offset + 5), // totalLength
            cursor.getFloat(offset + 6), // percentage
            cursor.getInt(offset + 7), // state
            cursor.getInt(offset + 8), // childTaskCount
            cursor.getLong(offset + 9), // date
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // lastModify
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownloadData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCurrentLength(cursor.getInt(offset + 4));
        entity.setTotalLength(cursor.getInt(offset + 5));
        entity.setPercentage(cursor.getFloat(offset + 6));
        entity.setState(cursor.getInt(offset + 7));
        entity.setChildTaskCount(cursor.getInt(offset + 8));
        entity.setDate(cursor.getLong(offset + 9));
        entity.setLastModify(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownloadData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownloadData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownloadData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
