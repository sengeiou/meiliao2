package com.ziran.meiliao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ziran.meiliao.entry.AlbumEntry;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALBUM_ENTRY".
*/
public class AlbumEntryDao extends AbstractDao<AlbumEntry, Long> {

    public static final String TABLENAME = "ALBUM_ENTRY";

    /**
     * Properties of entity AlbumEntry.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CollectCount = new Property(0, int.class, "collectCount", false, "COLLECT_COUNT");
        public final static Property HeadImg = new Property(1, String.class, "headImg", false, "HEAD_IMG");
        public final static Property IsCollectAlbum = new Property(2, boolean.class, "isCollectAlbum", false, "IS_COLLECT_ALBUM");
        public final static Property ShareUrl = new Property(3, String.class, "shareUrl", false, "SHARE_URL");
        public final static Property Detail = new Property(4, String.class, "detail", false, "DETAIL");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
        public final static Property AlbumId = new Property(6, String.class, "albumId", false, "ALBUM_ID");
        public final static Property Name = new Property(7, String.class, "name", false, "NAME");
        public final static Property IsBuy = new Property(8, boolean.class, "isBuy", false, "IS_BUY");
        public final static Property Id = new Property(9, Long.class, "id", true, "_id");
        public final static Property Picture = new Property(10, String.class, "picture", false, "PICTURE");
    }


    public AlbumEntryDao(DaoConfig config) {
        super(config);
    }
    
    public AlbumEntryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALBUM_ENTRY\" (" + //
                "\"COLLECT_COUNT\" INTEGER NOT NULL ," + // 0: collectCount
                "\"HEAD_IMG\" TEXT," + // 1: headImg
                "\"IS_COLLECT_ALBUM\" INTEGER NOT NULL ," + // 2: isCollectAlbum
                "\"SHARE_URL\" TEXT," + // 3: shareUrl
                "\"DETAIL\" TEXT," + // 4: detail
                "\"TITLE\" TEXT," + // 5: title
                "\"ALBUM_ID\" TEXT," + // 6: albumId
                "\"NAME\" TEXT," + // 7: name
                "\"IS_BUY\" INTEGER NOT NULL ," + // 8: isBuy
                "\"_id\" INTEGER PRIMARY KEY ," + // 9: id
                "\"PICTURE\" TEXT);"); // 10: picture
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALBUM_ENTRY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AlbumEntry entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCollectCount());
 
        String headImg = entity.getHeadImg();
        if (headImg != null) {
            stmt.bindString(2, headImg);
        }
        stmt.bindLong(3, entity.getIsCollectAlbum() ? 1L: 0L);
 
        String shareUrl = entity.getShareUrl();
        if (shareUrl != null) {
            stmt.bindString(4, shareUrl);
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(5, detail);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String albumId = entity.getAlbumId();
        if (albumId != null) {
            stmt.bindString(7, albumId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(8, name);
        }
        stmt.bindLong(9, entity.getIsBuy() ? 1L: 0L);
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(10, id);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(11, picture);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AlbumEntry entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCollectCount());
 
        String headImg = entity.getHeadImg();
        if (headImg != null) {
            stmt.bindString(2, headImg);
        }
        stmt.bindLong(3, entity.getIsCollectAlbum() ? 1L: 0L);
 
        String shareUrl = entity.getShareUrl();
        if (shareUrl != null) {
            stmt.bindString(4, shareUrl);
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(5, detail);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String albumId = entity.getAlbumId();
        if (albumId != null) {
            stmt.bindString(7, albumId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(8, name);
        }
        stmt.bindLong(9, entity.getIsBuy() ? 1L: 0L);
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(10, id);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(11, picture);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9);
    }    

    @Override
    public AlbumEntry readEntity(Cursor cursor, int offset) {
        AlbumEntry entity = new AlbumEntry( //
            cursor.getInt(offset + 0), // collectCount
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // headImg
            cursor.getShort(offset + 2) != 0, // isCollectAlbum
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // shareUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // detail
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // title
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // albumId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // name
            cursor.getShort(offset + 8) != 0, // isBuy
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // id
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // picture
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AlbumEntry entity, int offset) {
        entity.setCollectCount(cursor.getInt(offset + 0));
        entity.setHeadImg(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsCollectAlbum(cursor.getShort(offset + 2) != 0);
        entity.setShareUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDetail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAlbumId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsBuy(cursor.getShort(offset + 8) != 0);
        entity.setId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setPicture(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AlbumEntry entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AlbumEntry entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AlbumEntry entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
